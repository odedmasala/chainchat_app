name: Security Scanning

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "chainchat/**"
      - "pyproject.toml"
      - "poetry.lock"
  pull_request:
    branches: [main]
    paths:
      - "chainchat/**"
      - "pyproject.toml"
      - "poetry.lock"
  schedule:
    - cron: "0 2 * * 1"

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📝 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: security-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📦 Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: 🔧 Install project
        run: poetry install --no-interaction

      - name: 🛡️ Security check with Bandit
        run: |
          poetry run pip install bandit[toml]
          poetry run bandit -r chainchat/ -f json -o bandit-report.json
          poetry run bandit -r chainchat/ -ll
        continue-on-error: true

      - name: 🔒 Dependency security check with Safety
        run: |
          poetry run pip install safety
          poetry run safety check --json --output safety-report.json
          poetry run safety check
        continue-on-error: true

      - name: 📄 License compliance check
        run: |
          poetry run pip install pip-licenses
          poetry run pip-licenses --format=json --output-file=licenses.json
          poetry run pip-licenses --fail-on="GPL v3"
        continue-on-error: true

      - name: 📊 Generate security summary
        if: always()
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f bandit-report.json ]; then
            BANDIT_ISSUES=$(jq '.results | length' bandit-report.json)
            if [ "$BANDIT_ISSUES" -eq 0 ]; then
              echo "- 🛡️ **Bandit Security Scan**: ✅ No security issues found" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 🛡️ **Bandit Security Scan**: ⚠️ $BANDIT_ISSUES issues found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- 🛡️ **Bandit Security Scan**: ❌ Report not generated" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f safety-report.json ]; then
            echo "- 🔒 **Safety Dependency Check**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 🔒 **Safety Dependency Check**: ❌ Report not generated" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f licenses.json ]; then
            echo "- 📄 **License Compliance**: ✅ Checked" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 📄 **License Compliance**: ❌ Report not generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            licenses.json
          retention-days: 30

      - name: 📋 Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = '🚨 Security Vulnerabilities Detected';
            const body = `
            ## Security Scan Results

            Our automated security scan has detected potential vulnerabilities in the codebase.

            **Scan Details:**
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref }}
            - **Workflow**: ${{ github.workflow }}
            - **Run ID**: ${{ github.run_id }}

            Please review the security reports in the workflow artifacts and address any critical issues.

            **Next Steps:**
            1. Download the security reports from the workflow artifacts
            2. Review each identified vulnerability
            3. Update dependencies or fix code issues as needed
            4. Re-run the security scan to verify fixes

            This issue will be automatically closed when the security scan passes.
            `;

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'automated'],
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'priority-high']
              });
            }

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: security-analysis
    if: always()

    steps:
      - name: ✅ Security Success
        if: needs.security-analysis.result == 'success'
        run: |
          echo "## ✅ Security Scanning Complete! 🔒" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security checks passed successfully." >> $GITHUB_STEP_SUMMARY

      - name: ⚠️ Security Warnings
        if: needs.security-analysis.result != 'success'
        run: |
          echo "## ⚠️ Security Issues Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed with warnings or errors." >> $GITHUB_STEP_SUMMARY
          echo "Please review the security reports for details." >> $GITHUB_STEP_SUMMARY
