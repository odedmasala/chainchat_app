name: Code Quality & Testing

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "chainchat/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
  pull_request:
    branches: [main]
    paths:
      - "chainchat/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📝 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📦 Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: 🔧 Install project
        run: poetry install --no-interaction

      - name: 🎨 Code formatting check with Black
        run: |
          poetry run pip install black
          poetry run black --check --diff .

      - name: 📋 Import sorting check with isort
        run: |
          poetry run pip install isort
          poetry run isort --check-only --diff .

      - name: 🔍 Linting with flake8
        run: |
          poetry run pip install flake8
          poetry run flake8 chainchat/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: 🏷️ Type checking with mypy
        run: |
          poetry run pip install mypy types-requests
          poetry run mypy chainchat/ --ignore-missing-imports
        continue-on-error: true

      - name: 🧪 Run tests with pytest
        run: |
          poetry run pip install pytest pytest-cov
          poetry run pytest tests/ -v --cov=chainchat --cov-report=xml --cov-report=html
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: code-quality
    if: always()

    steps:
      - name: ✅ Success Summary
        if: needs.code-quality.result == 'success'
        run: |
          echo "## ✅ Code Quality Checks Passed! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 Code formatting: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Import sorting: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Linting: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Type checking: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Tests: ✅ Passed" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Failure Summary
        if: needs.code-quality.result != 'success'
        run: |
          echo "## ❌ Code Quality Checks Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the job logs for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          exit 1
