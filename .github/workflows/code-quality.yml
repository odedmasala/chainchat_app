name: Code Quality & Testing

on:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Code formatting check with Black
        run: |
          poetry run pip install black
          poetry run black --check --diff .

      - name: Import sorting check with isort
        run: |
          poetry run pip install isort
          poetry run isort --check-only --diff --profile black .

      - name: Linting with flake8
        run: |
          poetry run pip install flake8
          poetry run flake8 chainchat/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking with mypy
        run: |
          poetry run pip install mypy types-requests
          poetry run mypy chainchat/ --ignore-missing-imports
        continue-on-error: true

      - name: Run unit tests
        run: |
          poetry run pip install pytest pytest-cov pytest-html
          poetry run pytest tests/unit/ -v -m "unit" --cov=chainchat --cov-report=xml:coverage-unit.xml --cov-report=html:htmlcov-unit/ --html=unit-test-report.html --self-contained-html
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

      - name: Run integration tests
        run: |
          poetry run pytest tests/integration/ -v -m "integration" --cov=chainchat --cov-append --cov-report=xml:coverage-integration.xml --cov-report=html:htmlcov-integration/ --html=integration-test-report.html --self-contained-html
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

      - name: Generate combined coverage report
        run: |
          # Skip coverage combine since data is already combined via --cov-append
          # poetry run coverage combine
          poetry run coverage xml -o coverage-combined.xml
          poetry run coverage html -d htmlcov-combined/
          poetry run coverage report --show-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-combined.xml
          flags: unittests,integrationtests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test reports and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            coverage-unit.xml
            coverage-integration.xml
            coverage-combined.xml
            htmlcov-unit/
            htmlcov-integration/
            htmlcov-combined/
            unit-test-report.html
            integration-test-report.html

  summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: code-quality
    if: always()

    steps:
      - name: Success Summary
        if: needs.code-quality.result == 'success'
        run: |
          echo "## Code Quality & Testing Passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Code formatting (Black): PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Import sorting (isort): PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Linting (flake8): PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Type checking (mypy): PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Reports: GENERATED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test artifacts available for download in workflow summary**" >> $GITHUB_STEP_SUMMARY

      - name: Failure Summary
        if: needs.code-quality.result != 'success'
        run: |
          echo "## Code Quality & Testing Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Some checks failed. Please review the details below:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Common Issues to Check:" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Formatting**: Run \`black .\` to fix formatting" >> $GITHUB_STEP_SUMMARY
          echo "- **Import Sorting**: Run \`isort .\` to fix import order" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: Fix flake8 issues reported" >> $GITHUB_STEP_SUMMARY
          echo "- **Type Checking**: Address mypy type errors" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: Check unit test failures" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: Review integration test issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test reports available in workflow artifacts**" >> $GITHUB_STEP_SUMMARY
          exit 1
